{"ast":null,"code":"const styles = require('./sweet-alert.css.js'),\n      define = require('@compone/define'),\n      style = require('@compone/style'),\n      once = require('utilise/once'),\n      time = require('utilise/time'),\n      def = require('utilise/def');\n\nmodule.exports = define('sweet-alert', function swal(node, state) {\n  style(node, styles);\n  const o = once(node),\n        m = o('.modal', 1),\n        {\n    exiting = false,\n    title = '',\n    content = '',\n    type = 'warning',\n    visible = title || content ? true : false,\n    buttons = [{\n      type: 'primary',\n      text: 'Close'\n    }]\n  } = state;\n  o(window).on('keydown.escape', keydown);\n  o.classed('exiting', exiting).classed('visible', visible)('.overlay', 1, null, '.modal');\n  m('.icon', 1).classed('question', type == 'question').classed('success', type == 'success').classed('working', type == 'working').classed('warning', type == 'warning').classed('loading', type == 'loading').classed('error', type == 'error').classed('info', type == 'info');\n  m('.title', 1).text(title);\n  m('.content', 1).html(content);\n  m('button', buttons).text(d => d.text).attr('class', d => d.type).on('click.default', (e, d, el) => (d.onClick || close)(e, d, el));\n\n  function close() {\n    state.exiting = true;\n    o.draw();\n    time(410, d => {\n      for (let prop in state) delete state[prop];\n\n      o.draw();\n    });\n  }\n\n  function show({\n    title,\n    content,\n    type,\n    buttons\n  } = {}) {\n    state.title = title;\n    state.content = content;\n    state.type = type;\n    state.buttons = buttons;\n    state.visible = true;\n    return node.render(); // TODO: change all draws\n  }\n\n  function keydown({\n    key\n  }) {\n    if (key == 'Escape') close();\n  }\n\n  def(node, close);\n  def(node, show);\n});","map":{"version":3,"sources":["F:/Assessment/client/chat-app/node_modules/sweet-alert/sweet-alert.js"],"names":["styles","require","define","style","once","time","def","module","exports","swal","node","state","o","m","exiting","title","content","type","visible","buttons","text","window","on","keydown","classed","html","d","attr","e","el","onClick","close","draw","prop","show","render","key"],"mappings":"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","sourcesContent":["const styles = require('./sweet-alert.css.js')\r\n    , define = require('@compone/define')\r\n    , style  = require('@compone/style')\r\n    , once   = require('utilise/once')\r\n    , time   = require('utilise/time')\r\n    , def    = require('utilise/def')\r\n\r\nmodule.exports = define('sweet-alert', function swal(node, state){\r\n  style(node, styles)\r\n  const o = once(node)\r\n      , m = o('.modal', 1)\r\n      , { exiting = false\r\n        , title = ''\r\n        , content = ''\r\n        , type = 'warning'\r\n        , visible = title || content ? true : false\r\n        , buttons = [{ type: 'primary', text: 'Close' }] } = state\r\n\r\n  o(window)\r\n    .on('keydown.escape', keydown)\r\n\r\n  o.classed('exiting', exiting)\r\n   .classed('visible', visible)\r\n    ('.overlay', 1, null, '.modal')\r\n\r\n  m('.icon', 1)\r\n    .classed('question', type == 'question')\r\n    .classed('success', type == 'success')\r\n    .classed('working', type == 'working')\r\n    .classed('warning', type == 'warning')\r\n    .classed('loading', type == 'loading')\r\n    .classed('error', type == 'error')\r\n    .classed('info', type == 'info')\r\n\r\n  m('.title', 1)\r\n    .text(title)\r\n\r\n  m('.content', 1)\r\n    .html(content)\r\n\r\n  m('button', buttons)\r\n    .text(d => d.text)\r\n    .attr('class', d => d.type)\r\n    .on('click.default', (e, d, el) => (d.onClick || close)(e, d, el))\r\n\r\n  function close() {\r\n    state.exiting = true\r\n    o.draw()\r\n    time(410, d => {\r\n      for (let prop in state) delete state[prop]\r\n      o.draw()\r\n    })\r\n  }\r\n\r\n  function show({ title, content, type, buttons } = {}) {\r\n    state.title = title\r\n    state.content = content\r\n    state.type = type\r\n    state.buttons = buttons\r\n    state.visible = true\r\n    return node.render() // TODO: change all draws\r\n  }\r\n\r\n  function keydown({ key }) {\r\n    if (key == 'Escape') close()\r\n  }\r\n  \r\n  def(node, close)\r\n  def(node, show)\r\n})"]},"metadata":{},"sourceType":"script"}